package ${package}.manager;

import java.util.logging.Logger;
import ${package}.model.${table.JavaName}Peer;
import ${package}.group.${table.JavaName}GroupBean;
import ${package}.model.${table.JavaName};
import net.zylk.torque.SearchQuery;
import net.zylk.torque.BaseQuery;
import net.zylk.torque.TorqueUtils;
import net.zylk.torque.manager.BaseManager;
import org.apache.torque.TorqueException;
import java.util.Enumeration;


#foreach ($fk in $table.ForeignKeys)
  #set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
import ${tblFK.Package}.model.${tblFK.JavaName};
import ${tblFK.Package}.model.${tblFK.JavaName}Peer;
#end

import org.apache.torque.util.Criteria;
import org.apache.torque.util.UniqueList;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class Base${table.JavaName}Manager extends BaseManager
{
	protected static final Logger logger = Logger.getLogger(
	   "${package}.managers.Base${table.JavaName}Manager");

	public static final Criteria buildSearchCriteria(DinamicGridBean dgb)
	{
		return BaseManager.buildSearchCriteria(dgb, new ${table.JavaName}Manager());
	}

	public static final Criteria buildSearchCriteria(String query, int offset, int limit)
	{
		return BaseManager.buildSearchCriteria(query, offset, limit, new ${table.JavaName}Manager());
	}

	public static final Criteria buildSearchCriteria(String query)
	{
		return BaseManager.buildSearchCriteria(query, new ${table.JavaName}Manager());
	}

	protected void addOrSearchCriteria(Criteria criteria,String campo,String valor, String condicion){
		Criteria.Criterion criterion = ${table.JavaName}Manager.getSearchCriterion(campo,valor, condicion);
		//Si existe ya un criterion hay que utilizarlo para añadir el or sino utilizará un and
		Enumeration enumeration =criteria.elements();
		if(enumeration.hasMoreElements()){
			Criteria.Criterion cr = (Criteria.Criterion) enumeration.nextElement();
			cr.or(criterion);
		}else{
			criteria.or(criterion);
		}
	}

	protected void addAndSearchCriteria(Criteria criteria,String campo, String valor, String condicion){
		Criteria.Criterion criterion = ${table.JavaName}Manager.getSearchCriterion(campo,valor, condicion);
		criteria.and(criterion);
	}

	protected static Criteria.Criterion getSearchCriterion(String campo,String valor, String condicion){
        Criteria criteria =  new Criteria();
        Criteria.Criterion criterion = null;

	#foreach ($col in $table.Columns)
		#set ( $cup=$col.Name.toUpperCase() )
		if(campo.equals("all") || campo.equals(BaseManager.campoToLowerCase(${table.JavaName}Peer.$cup)))
		{
			if(condicion.equals(BaseQuery.SingleQuery.EQUAL_CONDITION))
				criterion = TorqueUtils.addOrEqualCriteria(criterion,${table.JavaName}Peer.$cup,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LIKE_CONDITION))
				criterion = TorqueUtils.addOrLikeCriteria(criterion,${table.JavaName}Peer.$cup,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LESS_CONDITION))
				criterion = TorqueUtils.addOrLessCriteria(criterion,${table.JavaName}Peer.$cup,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.GREATER_CONDITION))
				criterion = TorqueUtils.addOrGreaterCriteria(criterion,${table.JavaName}Peer.$cup,valor,true);
		}
	#end
	#foreach ($fk in $table.ForeignKeys)
		#set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
		#if (!$tblFK.isForReferenceOnly())
			#foreach ($col in $tblFK.Columns)
				#set ( $cup=$col.Name.toUpperCase() )
		if(campo.equals("all") || campo.equals(BaseManager.campoToLowerCase(${tblFK.JavaName}Peer.$cup)))
		{
			if(condicion.equals(BaseQuery.SingleQuery.EQUAL_CONDITION))
				criterion = TorqueUtils.addOrEqualCriteria(criterion,${tblFK.JavaName}Peer.$cup,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LIKE_CONDITION))
				criterion = TorqueUtils.addOrLikeCriteria(criterion,${tblFK.JavaName}Peer.$cup,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.LESS_CONDITION))
				criterion = TorqueUtils.addOrLessCriteria(criterion,${tblFK.JavaName}Peer.$cup,valor,true);
			else if (condicion.equals(BaseQuery.SingleQuery.GREATER_CONDITION))
				criterion = TorqueUtils.addOrGreaterCriteria(criterion,${tblFK.JavaName}Peer.$cup,valor,true);
		}
			#end
		#end
	#end

		return criterion;
	}

	public static final ${table.JavaName}GroupBean get${table.JavaName}s() {
    	return Base${table.JavaName}Manager.get${table.JavaName}s(false);
	}

	public static final ${table.JavaName}GroupBean get${table.JavaName}s(boolean paginado) {
    	return Base${table.JavaName}Manager.get${table.JavaName}s(new Criteria(), paginado,0);
	}

	public static final ${table.JavaName}GroupBean get${table.JavaName}s(Criteria c) {
		return Base${table.JavaName}Manager.get${table.JavaName}s(c,false,0);
	}

	public static final ${table.JavaName}GroupBean get${table.JavaName}s(Criteria criteria,boolean paginado, int pagina) {
		${table.JavaName}GroupBean obj${table.JavaName}GroupBean = new ${table.JavaName}GroupBean();
		obj${table.JavaName}GroupBean.setPaginaActual(pagina);
		obj${table.JavaName}GroupBean.set${table.JavaName}s(criteria, paginado);
		return obj${table.JavaName}GroupBean;
	}

	#set ($pk_params = "")
	#set ($pk_params_def = "")
	#foreach ($pk in $table.PrimaryKey)
		#set ($id = "id_${pk.JavaName}")
		#set ($pktype = $pk.JavaNative )
		#if ($pk_params_def == "")
			#set ($pk_params_def = "$pktype $id")
			#set ($pk_params = "$id")
		#else
			#set ($pk_params_def = "$pk_params_def ,$pktype $id")
			#set ($pk_params = "$pk_params ,$id")
		#end
	#end

	public static final ${table.JavaName} get${table.JavaName}(${pk_params_def}) {
		Criteria c = new Criteria();
	#foreach ($pk in $table.PrimaryKey)
		#set ($id = "id_${pk.JavaName}")
		c.add(${table.JavaName}Peer.${pk.Name.toUpperCase()}, ${id});
	#end
		return Base${table.JavaName}Manager.${table.JavaName}sGroupBean2${table.JavaName}(Base${table.JavaName}Manager.get${table.JavaName}s(c));
	}

	public static final ${table.JavaName} ${table.JavaName}sGroupBean2${table.JavaName}(${table.JavaName}GroupBean obj){
		if(obj.size() == 1)
			return obj.get${table.JavaName}(0);
		else
			return null;
	}

	private static void update${table.JavaName}Attribute(${pk_params_def}, String valor, String campo) throws Exception
	{
		${table.JavaName} obj = Base${table.JavaName}Manager.get${table.JavaName}(${pk_params});
	#foreach ($col in $table.Columns)
		#set ( $cfc=$col.JavaName )
		#set ( $clo=$col.UncapitalisedJavaName )
		#set ( $cjtype = $col.JavaNative )
		if(campo.equals(${table.JavaName}Peer.${col.Name.toUpperCase()}))
		#if ($cjtype == 'int')
			obj.set${cfc}(Integer.parseInt(valor)); //$cjtype
		#elseif ($cjtype == 'double')
			obj.set${cfc}(Double.parseDouble(valor)); //$cjtype
		#else
			obj.set${cfc}(valor); //$cjtype
		#end
	#end
		obj.save();
	}

#foreach ($col in $table.Columns)
	#set ( $cfc=$col.JavaName )
	#set ( $clo=$col.UncapitalisedJavaName )
	#set ( $cjtype = $col.JavaNative )
	public static void update${cfc}(${pk_params_def}, String valor) throws Exception
	{
		update${table.JavaName}Attribute(${pk_params}, valor, ${table.JavaName}Peer.${col.Name.toUpperCase()});
	}
#end

#if ($complexObjectModel)
	#set ( $className = $table.JavaName )
	#set ( $countFK = 0 )
	#foreach ($dummyFK in $table.ForeignKeys)
		#set ( $countFK = $countFK + 1 )
	#end
	#if ($countFK >= 1)
	public void addJoins(Criteria criteria)
	{
		#foreach ($fk in $table.ForeignKeys)
			#set ( $tblFK = $table.Database.getTable($fk.ForeignTableName) )
			#if (!$tblFK.isForReferenceOnly())
			## want to cover this case, but the code is not there yet.
				#if ( !($fk.ForeignTableName.equals($table.Name)) )
					#set ( $partJoinName = "" )
					#foreach ($columnName in $fk.LocalColumns)
						#set ( $column = $table.getColumn($columnName) )
						#if ($column.isMultipleFK() || $fk.ForeignTableName.equals($table.Name))
							#set ( $partJoinName = "$partJoinName$column.JavaName" )
						#end
					#end
					#set ( $joinTable = $table.Database.getTable($fk.ForeignTableName) )
					#set ( $joinClassName = $joinTable.JavaName )
					#set ($interfaceName = $joinTable.JavaName)
					#if ($joinTable.Interface)
						#set ($interfaceName = $joinTable.Interface)
					#end
					#if ($partJoinName == "")
						#set ( $joinColumnId = $joinClassName )
						#set ( $joinInterface = $interfaceName )
						#set ( $collThisTable = "${className}s" )
						#set ( $collThisTableMs = $className )
					#else
						#set ( $joinColumnId= "${joinClassName}RelatedBy$partJoinName" )
						#set ( $joinInterface= "${interfaceName}RelatedBy$partJoinName" )
						#set ( $collThisTable="${className}sRelatedBy$partJoinName" )
						#set ( $collThisTableMs="${className}RelatedBy$partJoinName" )
					#end
					#set ( $lfMap = $fk.LocalForeignMapping )
					#foreach ($columnName in $fk.LocalColumns)
						#set ( $column = $table.getColumn($columnName) )
						#set ( $columnFk = $joinTable.getColumn( $lfMap.get($columnName) ) )
	criteria.addJoin(${table.JavaName}Peer.$column.Name.toUpperCase(),${joinClassName}Peer.$columnFk.Name.toUpperCase());
					#end
				#end
			#end
		#end
	}
	#else
	public void addJoins(Criteria criteria)
	{
	 //no tiene claves externas asi que el metodo no hace nada
	}
	#end

#end

  public static void delete${table.JavaName}(${pk_params_def}) throws TorqueException
  {
  	${table.JavaName}Peer.doDelete(${table.JavaName}Manager.get${table.JavaName}(${pk_params}));
  }

  public static ${table.JavaName} addUpdate${table.JavaName}(${table.JavaName} obj) throws TorqueException
  {
	${table.JavaName}GroupBean gb = new ${table.JavaName}GroupBean();
	gb.setElemento(obj);
	gb.save();
	return obj;
  }

}

