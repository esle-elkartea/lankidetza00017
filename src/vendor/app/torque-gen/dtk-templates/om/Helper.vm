package ${package}.helper;

import net.zylk.web.WebUtils;
import net.zylk.web.helper.BaseHelper;
import javax.servlet.http.HttpServletRequest;
import org.apache.torque.TorqueException;
import net.zylk.tools.format.FormatUtils;


import ${package}.model.${table.JavaName}Peer;
import ${package}.model.${table.JavaName};
import ${package}.manager.${table.JavaName}Manager;

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class $basePrefix${table.JavaName}Helper extends BaseHelper
{
	public static final String COMPLEX_ID_GET_METHOD = "getComplexId";
	private ${table.JavaName} obj;
#foreach ($col in $table.Columns)
	#set ($cnu = ${col.Name.toUpperCase()})
	#set ($cfc=$col.JavaName)
	public static final String ${cnu}_GET_METHOD_NAME = "get${cfc}";
#end


	public $basePrefix${table.JavaName}Helper()
	{
		this.obj = new ${table.JavaName}();
	}

	public $basePrefix${table.JavaName}Helper(${table.JavaName} obj)
	{
		this.obj = obj;
	}

#foreach ($col in $table.Columns)
	#set ( $cfc=$col.JavaName )
	#set ( $cjtype = $col.JavaNative )

	public String get${cfc}HTMLAttrs()
	{
		return " name=\"" + get${cfc}Name() + "\" " +
			   "id=\"" + get${cfc}Id() + "\" " +
			   "value=\"" + get${cfc}Value() + "\" ";
	 }

	public String get${cfc}Id()
	{
		return get${cfc}Id(obj);
	}

	private static String get${cfc}Id(${table.JavaName} o)
	{
		return ${table.JavaName}Peer.${col.Name.toUpperCase()};
	}

	public String get${cfc}Name()
	{
		return get${cfc}Name(obj);
	}

	private static String get${cfc}Name(${table.JavaName} o)
	{
		return ${table.JavaName}Peer.${col.Name.toUpperCase()};
	}

	public String get${cfc}Value()
	{
		return get${cfc}Value(obj);
	}

	private static String get${cfc}Value(${table.JavaName} o)
	{
	#if ($cjtype == "String")
		if(o.get${cfc}() != null)
			return "" + o.get${cfc}();
		else
			return "";
	#else
		return "" + o.get${cfc}();
	#end
	}
#end

	public static ${table.JavaName} get${table.JavaName}(HttpServletRequest req) throws TorqueException
	{
	#set ($comillas = '""')
	#set ($pk_condition = "")
	#set ($pk_params = "")
	#foreach ($pk in $table.PrimaryKey)
		#set ($id = "id_${pk.JavaName}")
		#set ($pktype = $pk.JavaNative )
		#set ($cond = "")
		#if ($pktype == "String")
			#set ($cond = "($id != null && !${id}.equals($comillas))")
		#else
			#set ($cond = "($id >= 0)")
		#end
		#if ($pk_condition == "")
			#set ($pk_condition = $cond)
			#set ($pk_params = $id)
		#else
			#set ($pk_condition = "$pk_condition && $cond")
			#set ($pk_params = "$pk_params , $id")
		#end

		${pktype} ${id} = WebUtils.get${pktype}Param(req, get${pk.javaName}Name(new ${table.JavaName}()));

	#end

		${table.JavaName} o = new ${table.JavaName}();
		if(${pk_condition}) // no es nuevo y lo fijamos en el objeto
		{
			o = ${table.JavaName}Manager.get${table.JavaName}(${pk_params});
		}
		return o;
	}

	public static ${table.JavaName} createObj(HttpServletRequest req) throws TorqueException
	{
		${table.JavaName} o =  $basePrefix${table.JavaName}Helper.get${table.JavaName}(req);
	#foreach ($col in $table.Columns)
		#set ( $cfc=$col.JavaName )
		#set ( $cjtype = $col.JavaNative )
		#if($col.isForeignKey() && ${cjtype} == 'int')
 		o.set${cfc}(Integer.parseInt(FormatUtils.getFkIdFromString(WebUtils.getStringParam(req, get${cfc}Name(o)))));
#else
 o.set${cfc}(WebUtils.get${cjtype}Param(req, get${cfc}Name(o)));
#end
		
	#end
		return o;
	}
}
