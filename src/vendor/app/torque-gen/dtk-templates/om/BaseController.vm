package ${package}.controller;

import java.io.IOException;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.zylk.tools.format.FormatUtils;
import net.zylk.web.WebUtils;
import java.util.ArrayList;
import net.zylk.tools.ajax.AjaxUtils;

import ${package}.manager.${table.JavaName}Manager;
import ${package}.helper.${table.JavaName}Helper;

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class Base${table.JavaName}Controller extends AppController
{
 private static final Logger logger = Logger.getLogger("${package}.controller.Base${table.JavaName}Controller");
 protected static final String UPDATE_PRIMARY_KEY_FORM_NAME = "primaryKeyId";
 protected static final String UPDATE_VALUE_FORM_NAME = "value";

#set ($pk_params = "")

#set ($contador=0)
#set ($comas = "")
   #foreach ($col2 in $table.PrimaryKey)
     #set ( $cjtype2 = $col2.JavaNative )
     	#if($contador != 0)
     		#set ($comas = ",")
     	#end

  	#if ( $cjtype2 == "int" )
          #set ($pk_params = "$pk_params $comas Integer.parseInt(a.get($contador).toString())")
        #elseif($cjtype2 == "String")
          #set ($pk_params = "$pk_params $comas a.get($contador).toString()")
        #else
          #set ($pk_params = "$pk_params $comas a.get($contador).toString()")
        #end
        #set ($contador = $contador +1)
    #end

#foreach ($col in $table.Columns)
	#set ($cfc=$col.JavaName)
	#set ($cjtype=$col.JavaNative)
 public void serviceUpdate${cfc}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  utf8RequestService(request);
  logger.finest("ID A ACTUALIZAR: "+WebUtils.getintParam(request, UPDATE_PRIMARY_KEY_FORM_NAME));
  logger.finest("Nombre A ACTUALIZAR: "+WebUtils.getStringParam(request, UPDATE_VALUE_FORM_NAME));
  try
  {
   ArrayList a = AjaxUtils.splitIdFields(WebUtils.getStringParam(request, UPDATE_PRIMARY_KEY_FORM_NAME));
   ${table.JavaName}Manager.update${cfc}(
     					 ${pk_params},
   					 update${cfc}RequestCallBack(WebUtils.getStringParam(request, UPDATE_VALUE_FORM_NAME))
   					);
  				simpleResponseService(response, update${cfc}ResponseCallBack(WebUtils.getStringParam(request, UPDATE_PRIMARY_KEY_FORM_NAME)));
  }
  catch (Exception e)
  {
   logger.severe("NO se ha podido actualizar el valor"+ e.getMessage());
   response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
 }

 protected StringBuffer update${cfc}ResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  #if($cjtype == 'int')
  	return new StringBuffer(Integer.toString(${table.JavaName}Manager.get${table.JavaName}(${pk_params}).get${cfc}()));
  #elseif($cjtype == 'double')
  	return new StringBuffer(Double.toString(${table.JavaName}Manager.get${table.JavaName}(${pk_params}).get${cfc}()));
  #else
  	return new StringBuffer(${table.JavaName}Manager.get${table.JavaName}(${pk_params}).get${cfc}());
  #end
 }

 protected String update${cfc}RequestCallBack(String value)
 {
 #if($col.isForeignKey())
 return FormatUtils.getFkIdFromString(value);
 #else
 return value;
 #end
 }
#end

 public void serviceDelete${table.JavaName}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  utf8RequestService(request);
  logger.finest("ID A ELIMINAR: "+WebUtils.getintParam(request, UPDATE_PRIMARY_KEY_FORM_NAME));
  try
  {
   ArrayList a = AjaxUtils.splitIdFields(WebUtils.getStringParam(request, UPDATE_PRIMARY_KEY_FORM_NAME));
   ${table.JavaName}Manager.delete${table.JavaName}(${pk_params});
  }
  catch (Exception e)
  {
   logger.severe("NO se ha podido eliminar el valor "+ e.getMessage());
   response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
 }

 public void serviceAddUpdate${table.JavaName}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  utf8RequestService(request);
  try
  {
   ${table.JavaName}Manager.addUpdate${table.JavaName}(${table.JavaName}Helper.createObj(request));
  }
   catch(Exception e)
  {
   response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
 }


}

