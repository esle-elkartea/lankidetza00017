package ${package}.group;


import java.sql.Connection;
import java.util.List;
import java.util.logging.Logger;

//Torque classes
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.zylk.torque.group.BaseGroupBean;

// Local classes
import ${package}.model.${table.JavaName}Peer;
import ${package}.model.${table.JavaName};

/**
#if ($addTimeStamp)
 * This class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 */
public abstract class $basePrefix${table.JavaName}GroupBean
    extends BaseGroupBean
{
#if (!$table.isAlias())

    /** el logger para esta clase */
    private static final Logger logger = Logger
			.getLogger("${package}.$basePrefix${table.JavaName}Group");

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */

	public void set${table.JavaName}s(Criteria criteria, boolean paginado) {
		this.setElementos(criteria, paginado);
	}

	public ${table.JavaName} get${table.JavaName}() {
		return (${table.JavaName}) getNext();
	}

	public ${table.JavaName} get${table.JavaName}(int posicion) {
		return (${table.JavaName}) get(posicion);
	}


	//EHI : Implementacion de los metodos abstractos de la clase padre
	public List abstractSelect(Criteria c) throws TorqueException {
		return ${table.JavaName}Peer.doSelect(c);
	}

	public List abstractVillageRecords(Criteria c) throws TorqueException {
		return ${table.JavaName}Peer.doSelectVillageRecords(c);
	}

	public void abstractSave(Connection conn) throws TorqueException {
		${table.JavaName} element = null;
		while (this.next()) {
			element = this.get${table.JavaName}();
			element.save(conn);
		}
	}

	public void abstractDel(Connection conn) throws TorqueException {
		throw new TorqueException();
	}

	public String getDatabaseName(){
#foreach ($databaseName in $databaseNames)
		return "$databaseName";
#end
	}
}

#end




