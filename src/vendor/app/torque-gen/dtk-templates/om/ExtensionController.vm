package ${package}.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import ${package}.manager.${table.JavaName}Manager;
import ${package}.group.${table.JavaName}GroupBean;
import ${package}.helper.${table.JavaName}Helper;
import ${package}.model.${table.JavaName}Peer;
import ${package}.model.${table.JavaName};

#foreach ($col in $table.Columns)
#if ($col.isForeignKey())
#set ($tblFK = $table.Database.getTable($col.RelatedTableName) )
import ${package}.manager.${tblFK.JavaName}Manager;
import ${package}.group.${tblFK.JavaName}GroupBean;
import ${package}.model.${tblFK.JavaName}Peer;
import ${package}.helper.${tblFK.JavaName}Helper;
#end
#end

#foreach ($fk in $table.Referrers)
#set ( $tblFK = $fk.Table )
import ${package}.helper.${tblFK.JavaName}Helper;
#end


import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
#if ($addTimeStamp)
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [$now]
 *
#end
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
 
#set ($pks = $table.PrimaryKey)
#if ($pks.size() == 1)
  #set ($pk = $pks.get(0))
  #set ( $cup=$pk.Name.toUpperCase() )
#end 
 
public class ${table.JavaName}Controller
    extends ${package}.controller.${basePrefix}${table.JavaName}Controller
{
 private static final Logger logger = Logger.getLogger("${package}.controller.${table.JavaName}Controller");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer ${table.JavaName.toLowerCase()}_transformer = null;  
 private Transformer ${table.JavaName.toLowerCase()}s_transformer = null; 

 public void init(ServletConfig config)
 {
	super.init();
	ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/${nombreApp}/app/config/app-config");
	File ${table.JavaName.toLowerCase()} = new File(resource.getString("app.xsl.templates.dir")+"/Pdf${table.JavaName}.xslt");
	Source xslSource = new StreamSource(${table.JavaName.toLowerCase()});
	File ${table.JavaName.toLowerCase()}s = new File(resource.getString("app.xsl.templates.dir")+"/PdfLista${table.JavaName}.xslt");
	Source xslSourceT = new StreamSource(${table.JavaName.toLowerCase()}s); 	  
	try{
		${table.JavaName.toLowerCase()}_transformer = tFactory.newTransformer(xslSource);
		${table.JavaName.toLowerCase()}s_transformer = tFactory.newTransformer(xslSourceT);			  
	}catch (Exception e){
	  e.printStackTrace();
	}
 }


//Función para la inserción/actualización de registros

public void serviceAdd${table.JavaName}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 //Con esto se consigue transformar el request a UTF
	 //para temas de acentos y otros caracteres
	 utf8RequestService(request);

	 //recojo los parametros del formulario y doy de alta un nuevo elmento
	 try
	 {
		 ${table.JavaName} el${table.JavaName} = ${table.JavaName}Helper.createObj(request);
		 ${table.JavaName}GroupBean gb${table.JavaName} = new ${table.JavaName}GroupBean();
#foreach ($col in $table.Columns)
#if ($col.JavaName.toUpperCase().indexOf("FECHA")!=-1)		 
		 el${table.JavaName}.set${col.JavaName}(FormatUtils.ddmmaaaa2aaaammdd(el${table.JavaName}.get${col.JavaName}(),"-",""));
#end		 
#end		 
		 gb${table.JavaName}.setElemento(el${table.JavaName});
		 gb${table.JavaName}.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }


//Función para la eliminación de un registro
//este método invoca al método public void delete${table.JavaName}(int idBorrar)
//definido en el ${table.JavaName}Manager
 public void serviceDelete${table.JavaName}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
 		 if (${table.JavaName}Manager.borra${table.JavaName}(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }


// Funciones para las ordenaciones y filtrados de información

 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
		{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //Caso uno de Filtrado
		  //c.add(Campo,valor);
		  break;
	 case 2:
		  //Caso dos de Filtrado
		  //c.add(Campo,valor);
		  break;
	 default:
		 //caso por defecto
		 break;
	 }
	return c;
}

 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }

 private Criteria criteria${table.JavaName}TableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
 	String param = "";	 
#foreach ($col in $table.Columns)
#if ($col.isForeignKey())
#set ($cnu = ${col.Name.toUpperCase()})
#set ($tblFK = $table.Database.getTable($col.RelatedTableName) )
#set ($tblFKName = $tblFK.JavaName )
	 param =  WebUtils.getStringParam(request, new ${tblFKName}Helper().get${col.JavaName}Name());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,${table.JavaName}Peer.${cnu},param);
#end
#end
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public String getPathElement${table.JavaName}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;
	 int claveFkId=-1;	 
	 claveId=WebUtils.getintParam(request, "${table.JavaName.toLowerCase()}.$cup");
	 if (claveId!=-1)
	 {
		c.add(${table.JavaName}Peer.$cup, claveId);
		${table.JavaName}GroupBean trgb = ${table.JavaName}Manager.get${table.JavaName}s(c);							
		strPath = trgb.get${table.JavaName}(0).getPath${table.JavaName}Parsed(request.getQueryString());
	 }
	 return "<path>" + strPath + "</path>";
 } 
 
 public String getPathTableContent${table.JavaName}(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;	 
#foreach ($col in $table.Columns)
#if ($col.isForeignKey())
#set ($cnu = ${col.Name.toUpperCase()})
#set ($cfc=$col.JavaName)
#set ($tblFK = $table.Database.getTable($col.RelatedTableName) )
#set ($tblFKName = $tblFK.JavaName )
#set ($tableLC = $table.JavaName.toLowerCase())
#set ($tblFKLC = $tblFK.JavaName.toLowerCase())	 
	 claveId=WebUtils.getintParam(request, "${tblFKLC}.${cnu}");
	 if(claveId != -1){
		 strPath = ${tblFKName}Manager.get${tblFKName}(claveId).getPath${tblFKName}Parsed(request.getQueryString());
	 }		 	 
#end
#end	 
	 return "<path>" + strPath + "</path>";
 }  


public void  service${table.JavaName}TableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =${table.JavaName}Manager.buildSearchCriteria(dgb);
	 c =criteria${table.JavaName}TableContent(request,c);	 
	 ${table.JavaName}GroupBean cgb = ${table.JavaName}Manager.get${table.JavaName}s(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
#set ( $comma = "" )
#foreach ($col in $table.Columns)
#set ($cnu = ${col.Name.toUpperCase()})
#set ($cfc=$col.JavaName)
#if (!$col.isPrimaryKey())	
		${comma}${table.JavaName}Helper.${cnu}_GET_METHOD_NAME+"${table.JavaName}Parsed"
#set ( $comma = "," )
#end				
#end	
#foreach ($fk in $table.Referrers)
#set ( $tblFK = $fk.Table )
#set ($tblFKName = $tblFK.JavaName )
		,"getHijos${tblFKName}${table.JavaName}"
#end		 
		,"getEdit${table.JavaName}"
		,"getDelete${table.JavaName}"
	};
	 
	 StringBuffer cadena=null;
	 cadena = AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(cgb.getAlmacen(),methodos,${table.JavaName}Helper.${cup}_GET_METHOD_NAME, dgb,"ISO-8859-1"); 
	 cadena.insert(cadena.indexOf("</ajax-response>"),"<response type='object' id='divPath'>" + getPathTableContent${table.JavaName}(request,response) + "</response>");
	 xmlResponseService(response,cadena); 
 }  

 public void service${table.JavaName}UlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
	 		"getULContent${table.JavaName}Parsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
#foreach ($fk in $table.Referrers)
#set ( $tblFK = $fk.Table )
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new ${tblFK.JavaName}Helper().get${pk.JavaName}Name());
#end	 
	 	 
	 ${table.JavaName}GroupBean mgb = ${table.JavaName}Manager.get${table.JavaName}s(${table.JavaName}Manager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, ${table.JavaName}Helper.COMPLEX_ID_GET_METHOD,"${table.JavaName}"));
 } 



 public void service${table.JavaName}Element(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "${table.JavaName.toLowerCase()}.$cup");
  if (claveId!=-1)
  {
	  c.add(${table.JavaName}Peer.$cup, claveId);
  }
  c.addAscendingOrderByColumn(${table.JavaName}Peer.$cup);
  ${table.JavaName}GroupBean trgb = ${table.JavaName}Manager.get${table.JavaName}s(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
#set ( $comma = "" )
#foreach ($col in $table.Columns)
#set ($cnu = ${col.Name.toUpperCase()})
#set ($cfc=$col.JavaName)
#if ($col.isPrimaryKey())
		${comma}${table.JavaName}Helper.${cnu}_GET_METHOD_NAME
#else	
		${comma}${table.JavaName}Helper.${cnu}_GET_METHOD_NAME+"${table.JavaName}Parsed"
#end
#set ( $comma = "," )
#end
	  };
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");	
	  cadena.insert(cadena.indexOf("</result>"),getPathElement${table.JavaName}(request,response));  
  }
  xmlResponseService(response, cadena);
 } 
 
#foreach ($col in $table.Columns) 
#set ($cfc=$col.JavaName)

 protected StringBuffer update${cfc}ResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(${table.JavaName}Manager.get${table.JavaName}(Integer.parseInt(a.get(0).toString())).get$cfc${table.JavaName}Parsed());
 }  
 
#end  
 
#foreach ($col in $table.Columns)
#if ($col.isForeignKey())
#set ($cnu = ${col.Name.toUpperCase()})
#set ($cfc=$col.JavaName)
#set ($tblFK = $table.Database.getTable($col.RelatedTableName) )
#set ($tblFKName = $tblFK.JavaName )
#set ($tableLC = $table.JavaName.toLowerCase())
#set ($tblFKLC = $tblFK.JavaName.toLowerCase())	
 
 public void service${table.JavaName}${tblFKName}(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "${tblFKLC}.${cnu}");
  if (claveId!=-1)
  {
	  c.add(${tblFKName}Peer.${cnu}, claveId);
  }
  c.addAscendingOrderByColumn(${tblFKName}Peer.${cnu});
  ${tblFKName}GroupBean trgb = ${tblFKName}Manager.get${tblFKName}s(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><${tableLC}.${cnu}>" + trgb.get${tblFKName}(0).getULContent${tblFK.JavaName}Parsed()  + "</${tableLC}.${cnu}></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			
#end		
#end	

 public void serviceGet${table.JavaName}DetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
#set ( $comma = "" )
#foreach ($col in $table.Columns)
#set ($cnu = ${col.Name.toUpperCase()})
#set ($cfc=$col.JavaName)
#if ($col.isPrimaryKey())
		${comma}${table.JavaName}Helper.${cnu}_GET_METHOD_NAME
#else	
		${comma}${table.JavaName}Helper.${cnu}_GET_METHOD_NAME+"${table.JavaName}Parsed"
#end
#set ( $comma = "," )
#end
			 };
	  
	 
	 ${table.JavaName}GroupBean tgb = new ${table.JavaName}GroupBean();
	 try
	{
		tgb.setElemento(${table.JavaName}Helper.get${table.JavaName}(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), ${table.JavaName.toLowerCase()}_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=${table.JavaName}.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }  

 public void service${table.JavaName}TableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	Criteria c= new Criteria();
  	String paramQuery =  WebUtils.getStringParam(request, "query");
  	if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		c = ${table.JavaName}Manager.buildSearchCriteria(paramQuery);   
  	c =criteria${table.JavaName}TableContent(request,c);	  
  	${table.JavaName}GroupBean tgb = ${table.JavaName}Manager.get${table.JavaName}s(c);
  
  	String[] methodos= new String[] {	
#set ( $comma = "" )
#foreach ($col in $table.Columns)
#set ($cnu = ${col.Name.toUpperCase()})
#set ($cfc=$col.JavaName)
#if (!$col.isPrimaryKey())	
		${comma}${table.JavaName}Helper.${cnu}_GET_METHOD_NAME+"${table.JavaName}Parsed"
#set ( $comma = "," )
#end				
#end
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), ${table.JavaName.toLowerCase()}s_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=Lista${table.JavaName}.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 }

}


