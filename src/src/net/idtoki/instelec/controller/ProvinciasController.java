package net.idtoki.instelec.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.instelec.manager.ProvinciasManager;
import net.idtoki.instelec.group.ProvinciasGroupBean;
import net.idtoki.instelec.helper.ProvinciasHelper;
import net.idtoki.instelec.model.ProvinciasPeer;
import net.idtoki.instelec.model.Provincias;


import net.idtoki.instelec.helper.LocalidadesHelper;


import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Aug 10 13:35:35 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
 
 
public class ProvinciasController
    extends net.idtoki.instelec.controller.BaseProvinciasController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.instelec.controller.ProvinciasController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer provincias_transformer = null;  
 private Transformer provinciass_transformer = null; 

 public void init(ServletConfig config)
 {
	super.init();
	ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/instelec/app/config/app-config");
	File provincias = new File(resource.getString("app.xsl.templates.dir")+"/PdfProvincias.xslt");
	Source xslSource = new StreamSource(provincias);
	File provinciass = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaProvincias.xslt");
	Source xslSourceT = new StreamSource(provinciass); 	  
	try{
		provincias_transformer = tFactory.newTransformer(xslSource);
		provinciass_transformer = tFactory.newTransformer(xslSourceT);			  
	}catch (Exception e){
	  e.printStackTrace();
	}
 }


//Función para la inserción/actualización de registros

public void serviceAddProvincias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 //Con esto se consigue transformar el request a UTF
	 //para temas de acentos y otros caracteres
	 utf8RequestService(request);

	 //recojo los parametros del formulario y doy de alta un nuevo elmento
	 try
	 {
		 Provincias elProvincias = ProvinciasHelper.createObj(request);
		 ProvinciasGroupBean gbProvincias = new ProvinciasGroupBean();
		 gbProvincias.setElemento(elProvincias);
		 gbProvincias.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }


//Función para la eliminación de un registro
//este método invoca al método public void deleteProvincias(int idBorrar)
//definido en el ProvinciasManager
 public void serviceDeleteProvincias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
 		 if (ProvinciasManager.borraProvincias(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }


// Funciones para las ordenaciones y filtrados de información

 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
		{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //Caso uno de Filtrado
		  //c.add(Campo,valor);
		  break;
	 case 2:
		  //Caso dos de Filtrado
		  //c.add(Campo,valor);
		  break;
	 default:
		 //caso por defecto
		 break;
	 }
	return c;
}

 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }

 private Criteria criteriaProvinciasTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
 	String param = "";	 
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public String getPathElementProvincias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;
	 int claveFkId=-1;	 
	 claveId=WebUtils.getintParam(request, "provincias.IDPROVINCIA");
	 if (claveId!=-1)
	 {
		c.add(ProvinciasPeer.IDPROVINCIA, claveId);
		ProvinciasGroupBean trgb = ProvinciasManager.getProvinciass(c);							
		strPath = trgb.getProvincias(0).getPathProvinciasParsed(request.getQueryString());
	 }
	 return "<path>" + strPath + "</path>";
 } 
 
 public String getPathTableContentProvincias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;	 
	 return "<path>" + strPath + "</path>";
 }  


public void  serviceProvinciasTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =ProvinciasManager.buildSearchCriteria(dgb);
	 c =criteriaProvinciasTableContent(request,c);	 
	 ProvinciasGroupBean cgb = ProvinciasManager.getProvinciass(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
		ProvinciasHelper.NOMBRE_GET_METHOD_NAME+"ProvinciasParsed"
		,"getHijosLocalidadesProvincias"
		,"getEditProvincias"
		,"getDeleteProvincias"
	};
	 
	 StringBuffer cadena=null;
	 cadena = AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(cgb.getAlmacen(),methodos,ProvinciasHelper.IDPROVINCIA_GET_METHOD_NAME, dgb,"ISO-8859-1"); 
	 cadena.insert(cadena.indexOf("</ajax-response>"),"<response type='object' id='divPath'>" + getPathTableContentProvincias(request,response) + "</response>");
	 xmlResponseService(response,cadena); 
 }  

 public void serviceProvinciasUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
	 		"getULContentProvinciasParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new LocalidadesHelper().getIdprovinciaName());
	 	 
	 ProvinciasGroupBean mgb = ProvinciasManager.getProvinciass(ProvinciasManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, ProvinciasHelper.COMPLEX_ID_GET_METHOD,"Provincias"));
 } 




 protected StringBuffer updateIdprovinciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProvinciasManager.getProvincias(Integer.parseInt(a.get(0).toString())).getIdprovinciaProvinciasParsed());
 }  
 

 protected StringBuffer updateNombreResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(ProvinciasManager.getProvincias(Integer.parseInt(a.get(0).toString())).getNombreProvinciasParsed());
 }  
 
 

 public void serviceProvinciasElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "provincias.IDPROVINCIA");
  if (claveId!=-1)
  {
	  c.add(ProvinciasPeer.IDPROVINCIA, claveId);
  }
  c.addAscendingOrderByColumn(ProvinciasPeer.IDPROVINCIA);
  ProvinciasGroupBean trgb = ProvinciasManager.getProvinciass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
		ProvinciasHelper.IDPROVINCIA_GET_METHOD_NAME
		,ProvinciasHelper.NOMBRE_GET_METHOD_NAME+"ProvinciasParsed"
	  };
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");	
	  cadena.insert(cadena.indexOf("</result>"),getPathElementProvincias(request,response));  
  }
  xmlResponseService(response, cadena);
 }  
 

 public void serviceGetProvinciasDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		ProvinciasHelper.IDPROVINCIA_GET_METHOD_NAME
		,ProvinciasHelper.NOMBRE_GET_METHOD_NAME+"ProvinciasParsed"
			 };
	  
	 
	 ProvinciasGroupBean tgb = new ProvinciasGroupBean();
	 try
	{
		tgb.setElemento(ProvinciasHelper.getProvincias(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), provincias_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=Provincias.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }  

 public void serviceProvinciasTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	Criteria c= new Criteria();
  	String paramQuery =  WebUtils.getStringParam(request, "query");
  	if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		c = ProvinciasManager.buildSearchCriteria(paramQuery);   
  	c =criteriaProvinciasTableContent(request,c);	  
  	ProvinciasGroupBean tgb = ProvinciasManager.getProvinciass(c);
  
  	String[] methodos= new String[] {	
		ProvinciasHelper.NOMBRE_GET_METHOD_NAME+"ProvinciasParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), provinciass_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=ListaProvincias.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 }

}


