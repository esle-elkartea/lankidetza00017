package net.idtoki.instelec.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import net.idtoki.instelec.manager.PartesManager;
import net.idtoki.instelec.group.PartesGroupBean;
import net.idtoki.instelec.helper.PartesHelper;
import net.idtoki.instelec.model.PartesPeer;
import net.idtoki.instelec.model.Partes;

import net.idtoki.instelec.manager.OrdenestrabajoManager;
import net.idtoki.instelec.group.OrdenestrabajoGroupBean;
import net.idtoki.instelec.model.OrdenestrabajoPeer;
import net.idtoki.instelec.helper.OrdenestrabajoHelper;
import net.idtoki.instelec.manager.TrabajadoresManager;
import net.idtoki.instelec.group.TrabajadoresGroupBean;
import net.idtoki.instelec.model.TrabajadoresPeer;
import net.idtoki.instelec.helper.TrabajadoresHelper;

import net.idtoki.instelec.helper.LineasparteHelper;


import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Aug 10 13:35:35 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
 
 
public class PartesController
    extends net.idtoki.instelec.controller.BasePartesController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.instelec.controller.PartesController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer partes_transformer = null;  
 private Transformer partess_transformer = null; 
 private Transformer partesInforme_transformer = null;  

 public void init(ServletConfig config)
 {
	super.init();
	ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/instelec/app/config/app-config");
	File partes = new File(resource.getString("app.xsl.templates.dir")+"/PdfPartes.xslt");
	Source xslSource = new StreamSource(partes);
	File partess = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaPartes.xslt");
	Source xslSourceT = new StreamSource(partess); 
	File partesInforme = new File(resource.getString("app.xsl.templates.dir")+"/PdfPartesInforme.xslt");
	Source xslSourceInforme = new StreamSource(partesInforme);	
	try{
		partes_transformer = tFactory.newTransformer(xslSource);
		partess_transformer = tFactory.newTransformer(xslSourceT);	
		partesInforme_transformer = tFactory.newTransformer(xslSourceInforme);		
	}catch (Exception e){
	  e.printStackTrace();
	}
 }


//Función para la inserción/actualización de registros

public void serviceAddPartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 //Con esto se consigue transformar el request a UTF
	 //para temas de acentos y otros caracteres
	 utf8RequestService(request);

	 //recojo los parametros del formulario y doy de alta un nuevo elmento
	 try
	 {
		 Partes elPartes = PartesHelper.createObj(request);
		 PartesGroupBean gbPartes = new PartesGroupBean();
		 gbPartes.setElemento(elPartes);
		 gbPartes.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }


//Función para la eliminación de un registro
//este método invoca al método public void deletePartes(int idBorrar)
//definido en el PartesManager
 public void serviceDeletePartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
 		 if (PartesManager.borraPartes(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 }


// Funciones para las ordenaciones y filtrados de información

 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null))
 		{
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null))
		{
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

private Criteria filtro(Criteria c,int filtro) 
{ 
	String cadena = null;
	 switch (filtro)
	 {
	 case 1:
		  //Caso uno de Filtrado
		  //c.add(Campo,valor);
		  break;
	 case 2:
		  //Caso dos de Filtrado
		  //c.add(Campo,valor);
		  break;
	 default:
		 //caso por defecto
		 break;
	 }
	return c;
}

 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }

 private Criteria criteriaPartesTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
 	String param = "";	 
	 param =  WebUtils.getStringParam(request, new OrdenestrabajoHelper().getIdordenName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,PartesPeer.IDORDEN,param);
	 param =  WebUtils.getStringParam(request, new TrabajadoresHelper().getIdtrabajadorName());
	 if(param != null)
		 TorqueUtils.addEqualCriteria(c,PartesPeer.IDTRABAJADOR,param);
	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  c = ordenacion(c,paramSortCol,paramSortDir);
	  c = filtro(c,paramFiltro);

 	  return c;
 } 
 
 public String getPathElementPartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;
	 int claveFkId=-1;	 
	 claveId=WebUtils.getintParam(request, "partes.IDPARTE");
	 if (claveId!=-1)
	 {
		c.add(PartesPeer.IDPARTE, claveId);
		PartesGroupBean trgb = PartesManager.getPartess(c);							
		strPath = trgb.getPartes(0).getPathPartesParsed(request.getQueryString());
	 }
	 return "<path>" + strPath + "</path>";
 } 
 
 public String getPathTableContentPartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 Criteria c= new Criteria();
	 String strPath = "";
	 int claveId=-1;	 
	 claveId=WebUtils.getintParam(request, "ordenestrabajo.IDORDEN");
	 if(claveId != -1){
		 strPath = OrdenestrabajoManager.getOrdenestrabajo(claveId).getPathOrdenestrabajoParsed(request.getQueryString());
	 }		 	 
	 claveId=WebUtils.getintParam(request, "trabajadores.IDTRABAJADOR");
	 if(claveId != -1){
		 strPath = TrabajadoresManager.getTrabajadores(claveId).getPathTrabajadoresParsed(request.getQueryString());
	 }		 	 
	 return "<path>" + strPath + "</path>";
 }  


public void  servicePartesTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =PartesManager.buildSearchCriteria(dgb);
	 c =criteriaPartesTableContent(request,c);	 
	 PartesGroupBean cgb = PartesManager.getPartess(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
		PartesHelper.IDORDEN_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.IDTRABAJADOR_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed"
		,"getHijosLineaspartePartes"
		,"getEditPartes"
		,"getDeletePartes"
	};
	 
	 StringBuffer cadena=null;
	 cadena = AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(cgb.getAlmacen(),methodos,PartesHelper.IDPARTE_GET_METHOD_NAME, dgb,"ISO-8859-1"); 
	 cadena.insert(cadena.indexOf("</ajax-response>"),"<response type='object' id='divPath'>" + getPathTableContentPartes(request,response) + "</response>");
	 xmlResponseService(response,cadena); 
 }  

 public void servicePartesUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
	 		"getULContentPartesParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new LineasparteHelper().getIdparteName());
	 	 
	 PartesGroupBean mgb = PartesManager.getPartess(PartesManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(mgb.getAlmacen(),methodos, PartesHelper.COMPLEX_ID_GET_METHOD,"Partes"));
 } 



 public void servicePartesElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException, TorqueException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "partes.IDPARTE");
  if (claveId!=-1)
  {
	  c.add(PartesPeer.IDPARTE, claveId);
  }
  c.addAscendingOrderByColumn(PartesPeer.IDPARTE);
  PartesGroupBean trgb = PartesManager.getPartess(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
		PartesHelper.IDPARTE_GET_METHOD_NAME
		,PartesHelper.IDORDEN_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.IDTRABAJADOR_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed"
	  };
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");	
	  cadena.insert(cadena.indexOf("</result>"),getPathElementPartes(request,response));  
  }
  xmlResponseService(response, cadena);
 }  
 
 

 protected StringBuffer updateIdparteResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getIdpartePartesParsed());
 }  
 

 protected StringBuffer updateIdordenResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getIdordenPartesParsed());
 }  
 

 protected StringBuffer updateIdtrabajadorResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getIdtrabajadorPartesParsed());
 }  
 

 protected StringBuffer updateObservacionesResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
  return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getObservacionesPartesParsed());
 }  
 
 
 public void servicePartesOrdenestrabajo(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "ordenestrabajo.IDORDEN");
  if (claveId!=-1)
  {
	  c.add(OrdenestrabajoPeer.IDORDEN, claveId);
  }
  c.addAscendingOrderByColumn(OrdenestrabajoPeer.IDORDEN);
  OrdenestrabajoGroupBean trgb = OrdenestrabajoManager.getOrdenestrabajos(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><partes.IDORDEN>" + trgb.getOrdenestrabajo(0).getULContentOrdenestrabajoParsed()  + "</partes.IDORDEN></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			

 public void servicePartesTrabajadores(HttpServletRequest request, HttpServletResponse response) throws IOException, TorqueException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "trabajadores.IDTRABAJADOR");
  if (claveId!=-1)
  {
	  c.add(TrabajadoresPeer.IDTRABAJADOR, claveId);
  }
  c.addAscendingOrderByColumn(TrabajadoresPeer.IDTRABAJADOR);
  TrabajadoresGroupBean trgb = TrabajadoresManager.getTrabajadoress(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><partes.IDTRABAJADOR>" + trgb.getTrabajadores(0).getULContentTrabajadoresParsed()  + "</partes.IDTRABAJADOR></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
  			

 public void serviceGetPartesDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		PartesHelper.IDPARTE_GET_METHOD_NAME
		,PartesHelper.IDORDEN_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.IDTRABAJADOR_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed"
		,"getOrdenPartesParsed"
		,"getTrabajadorPartesParsed"		
			 };
	  
	 
	 PartesGroupBean tgb = new PartesGroupBean();
	 try
	{
		tgb.setElemento(PartesHelper.getPartes(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), partes_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=Partes.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }  

 public void servicePartesTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  	utf8RequestService(request);
  	Criteria c= new Criteria();
  	String paramQuery =  WebUtils.getStringParam(request, "query");
  	if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		c = PartesManager.buildSearchCriteria(paramQuery);   
  	c =criteriaPartesTableContent(request,c);	  
  	PartesGroupBean tgb = PartesManager.getPartess(c);
  
  	String[] methodos= new String[] {	
		PartesHelper.IDORDEN_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.IDTRABAJADOR_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed"
		,"getOrdenPartesParsed"
		,"getTrabajadorPartesParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), partess_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=ListaPartes.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
 }
 
 public void serviceGetPartesInformePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		PartesHelper.IDPARTE_GET_METHOD_NAME
		,PartesHelper.IDORDEN_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.IDTRABAJADOR_GET_METHOD_NAME+"PartesParsed"
		,PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed"
		,"getOrdenPartesParsed"
		,"getTrabajadorPartesParsed"
		,"getClientePartesParsed"
		,"getFechaLineasparteParsed"
		,"getHorasLineasparteParsed"
		,"getObservacionesLineasparteParsed"
			 };
	  
	 String[] getMetodosHijos = new String[] {"getLineaspartes"};//getXXXXXXs
	 
	 PartesGroupBean tgb = new PartesGroupBean();
	 try
	{
		tgb.setElemento(PartesHelper.getPartes(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, getMetodosHijos,"ISO-8859-1"),"n/a"," "), partesInforme_transformer,"ISO-8859-1");
	 response.addHeader("content-disposition","attachment;filename=PartesInforme.pdf");
	 response.setContentType("application/pdf");
	 response.setHeader("Cache-Control", "");//para que funcione en IE
	 response.setContentLength(content.length);
	 response.getOutputStream().write(content);
	 response.getOutputStream().flush();  
	 response.getOutputStream().close();
	
 }   

}


