
package net.idtoki.instelec.model;


import java.util.logging.Logger;

import net.zylk.tools.format.FormatUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Aug 10 13:35:35 CEST 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class Partes
    extends net.idtoki.instelec.model.BasePartes
    implements Persistent
{

private static final Logger logger = Logger.getLogger("net.idtoki.instelec.model.Partes");


		
	public String getIdpartePartesParsed()
	{
		return FormatUtils.genericParsedStr(this.getIdparte() + "");
		}					

		
	public String getIdordenPartesParsed()
	{
		String strFK=null;
		try
		{
			strFK=this.getOrdenestrabajo().getULContentOrdenestrabajoParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar Ordenestrabajo. getIdordenPartesParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(strFK);		
		}					

		
	public String getIdtrabajadorPartesParsed()
	{
		String strFK=null;
		try
		{
			strFK=this.getTrabajadores().getULContentTrabajadoresParsed();
		}
		catch (TorqueException te) {
			logger.severe("No se ha podido localizar Trabajadores. getIdtrabajadorPartesParsed()" );
			te.printStackTrace();
		}
		return FormatUtils.genericParsedStr(strFK);		
		}					

		
	public String getObservacionesPartesParsed()
	{
				return FormatUtils.genericParsedStr(this.getObservaciones());		
				}					


	public String getPathPartesParsed(String strQueryString) throws TorqueException
	{	
	  String a = "";
	  if (strQueryString.indexOf("trabajadores") != -1)	  
	  	a = a + this.getTrabajadores().getPathTrabajadoresParsed(strQueryString) + "/";
	  if (strQueryString.indexOf("ordenestrabajo") != -1)	  
	  	a = a + this.getOrdenestrabajo().getPathOrdenestrabajoParsed(strQueryString) + "/";
	  a = a + this.getIdparte();  
	  return a;
	}

	public String getULContentPartesParsed() throws TorqueException
	{
		return FormatUtils.genericParsedStr(this.getIdparte() + "-" + this.getOrdenestrabajo().getDescripcionOrdenestrabajoParsed() + "-" + this.getTrabajadores().getApellidouno());	
	}	

	public String getHijosLineaspartePartes()
	{
		return "<a href='#' class='hijos' id='getHijosLineaspartePartes" + this.getIdparte() + "' title='Lineasparte'>&#160;&#160;&#160;&#160;</a>";
	}
	
	public String getDeletePartes()
	{
		return "<a href='#' class='eliminar' id='getDeletePartes" + this.getIdparte() + "'>&#160;&#160;&#160;&#160;</a>";
	}	
	public String getEditPartes()
	{
		return "<a href='#' class='edicion' id='getEditPartes" + this.getIdparte() + "'>&#160;&#160;&#160;&#160;</a>";
	}

	public String getOrdenPartesParsed() throws TorqueException
	{
		return FormatUtils.genericParsedStr(this.getOrdenestrabajo().getDescripcionOrdenestrabajoParsed());	
	}
	
	public String getTrabajadorPartesParsed() throws TorqueException
	{
		return FormatUtils.genericParsedStr(this.getTrabajadores().getNombre() + " "  + this.getTrabajadores().getApellidouno());	
	}	

	public String getClientePartesParsed() throws TorqueException
	{
		return FormatUtils.genericParsedStr(this.getOrdenestrabajo().getTrabajos().getClientes().getNombreClientesParsed());	
	}	
	
}
